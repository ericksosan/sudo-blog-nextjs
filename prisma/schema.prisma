// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(uuid())
  firstname     String?
  lastname      String?
  fullname      String?
  email         String    @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  posts         Post[]    @relation("UserPosts")
  comments      Comment[]
  likes         Like[]
  saves         Save[]
  accounts      Account[]
}

model Post {
  id          String    @id @default(uuid())
  userId      String
  title       String
  slug        String    @unique
  content     String
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  views       Int       @default(0)
  user        User      @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
  saves       Save[]

  @@index([slug])
}

model Comment {
  id          String    @id @default(uuid())
  postId      String
  userId      String
  content     String
  createdAt   DateTime  @default(now())
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  posts       Post[]
}

model Like {
  id          String    @id @default(uuid())
  userId      String
  postId      String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Save {
  id          String    @id @default(uuid())
  userId      String
  postId      String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}